version: '3.4'
networks:
  webnet:
    driver: bridge
services:
  mysqldb:
    image: mysql:5.7
    container_name: mysqldb
    ports:
      - "3307:3306"
    volumes:
      - /opt/limsst/mysql/data:/var/lib/mysql
      - ./config/mysql/initsql/:/docker-entrypoint-initdb.d
      - ./config/mysql/docker.cnf:/etc/my.cnf
    networks:
      - webnet   
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: sunway123#
  estandard:
    depends_on:
      - mysqldb
      - redis
      - eureka
    image: registry.cn-hangzhou.aliyuncs.com/qijunbo/estandard:1
    volumes:
      - ./logs/estandard:/app-log
      - ./config/estandard:/config
    deploy:
      replicas: 1
#      resources:
#        limits:
#          cpus: "0.5"
#          memory: 2048M
      restart_policy:
        condition: on-failure
    ports:
      - "8102:8102"
    networks:
      - webnet
    restart: always
  portal:
    depends_on:
      - mysqldb 
      - redis
      - eureka
    image: registry.cn-hangzhou.aliyuncs.com/qijunbo/portal:1
    volumes:
      - ./logs/portal:/app-log
      - ./config/portal:/config
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: "0.3"
          memory: 1024M
      restart_policy:
        condition: on-failure
    ports:
      - "8103:8103"
    networks:
      - webnet
    restart: always
  msggateway:
    depends_on:
      - mysqldb 
      - redis
      - eureka
    image: registry.cn-hangzhou.aliyuncs.com/qijunbo/msggateway:1
    volumes:
      - ./logs/msggateway:/app-log
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: "0.1"
          memory: 512M
      restart_policy:
        condition: on-failure
    ports:
      - "8002:8002"
    networks:
      - webnet
    restart: always
  central:
    depends_on:
      - mysqldb 
      - redis
      - eureka
    image: registry.cn-hangzhou.aliyuncs.com/qijunbo/central:1
    volumes:
      - ./logs/central:/app-log
      - ./config/central:/config
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: "0.3"
#          memory: 1024M
      restart_policy:
        condition: on-failure
    ports:
      - "8006:8006"
    networks:
      - webnet
    restart: always
  redis:
      image: redis:alpine
      ports:
        - "6379:6379"
      networks:
        - webnet
      deploy:
        restart_policy:
          condition: on-failure
  eureka:
#      image: springcloud/eureka
      image: registry.cn-hangzhou.aliyuncs.com/qijunbo/eureka
      ports:
        - "8761:8761"
      networks:
        - webnet
      deploy:
        restart_policy:
          condition: on-failure
  nginx:
    # Note : Only nginx:alpine supports bcrypt.
    # If you don't need to use bcrypt, you can use a different tag.
    # Ref. https://github.com/nginxinc/docker-nginx/issues/29
    image: "nginx:alpine"
    ports:
      - 8090:80
    volumes:
      - ./config/nginx/:/etc/nginx/conf.d/
    restart: always
  solr:
    image: solr:7.2.1
    volumes:
      - ./config/solr/jar/mysql-connector-java-5.1.6.jar:/opt/solr/server/solr-webapp/webapp/WEB-INF/lib/mysql-connector-java-5.1.6.jar
      - ./config/solr/estandard/:/opt/solr/server/solr/estandard/
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    ports:
     - "8983:8983"
    entrypoint:
      - docker-entrypoint.sh
      - solr-create
      - "-c"
      - estandard
    networks:
      - webnet
